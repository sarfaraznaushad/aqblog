@page "/login"
@layout LoginLayout
@using AQBlog.Shared
@using System.Text.Json;
@inject IAuthenticationService authService
@inject NavigationManager navigationManager


<MudText Typo="Typo.h4" GutterBottom="true">Sign In</MudText>

<MudText>Don't have an account? <MudLink Href="/pages/authentication/register">Sign Up</MudLink></MudText>

<MudTextField T="string" @bind-Value="@model.UserName" Label="E-mail" Variant="Variant.Outlined" Class="my-6"></MudTextField>

<MudTextField @bind-Value="@model.Password" Label="Password" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordVisibility" />

<div Class="d-flex justify-space-between align-center">
    <MudCheckBox T="bool" Label="Remember me?" Color="Color.Primary" Class="ml-n1 my-3"></MudCheckBox>
    <MudLink Href="/pages/authentication/forgot-password">Forgot pwd?</MudLink>
</div>


<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="LoginUser" Size="Size.Large" FullWidth="true">Sign In</MudButton>

@code {
    private UserLoginMetaData model = new UserLoginMetaData();



    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordVisibility()
    {
        @if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }


    async Task LoginUser()
    {
        try
        {
            var user = this.model;
            await authService.Login(user.UserName, user.Password);
            var resturnUrl = navigationManager.QueryString("returnUrl") ?? "/auth/dashboard";
            navigationManager.NavigateTo(resturnUrl);
        }
        catch(Exception ex)
        {
            StateHasChanged();
        }

    }


}
