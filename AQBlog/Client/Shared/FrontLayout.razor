@inherits LayoutComponentBase

<MudThemeProvider Theme="_themeManager.Theme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="_themeManager.AppBarElevation" Dense="true">
        <div>
            <MudLink>
                <MudAvatar Style="@($"color:#ffffff; font-weight: 800;")" Color="Color.Primary" Square="true">&lt;/&gt;</MudAvatar>
                <MudAvatar Style="@($"color:#ffffff; font-weight: 800;")" Color="Color.Primary" Square="true"> AQ</MudAvatar>
            </MudLink>
            
        </div>

        <MudAppBarSpacer />
        <MudAutocomplete T="string" @bind-Value="value2" SearchFunc="@AutoComplete"
                         ResetValueOnEmptyText="@resetValueOnEmptyText" Variant="Variant.Outlined"
                         AdornmentIcon="@Icons.Material.Filled.Search" Margin="Margin.Dense"
                         Style="@($"background:{Colors.Blue.Lighten1};")" />

        <MudAppBarSpacer />
    </MudAppBar>
   
    <MudMainContent>        
        <MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
            <MudGrid>
                <MudItem xs="12" md="9" Class="pr-4">
                    <MudPaper Class="d-block align-start py-2 px-1">
                        @Body
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" md="3">
                    <MudPaper Class="d-block align-start py-2 px-1">
                        <AQBlog.Client.Pages.Category></AQBlog.Client.Pages.Category>
                    </MudPaper>                   
                </MudItem>
            </MudGrid>
          
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private bool resetValueOnEmptyText;
    private string value2;

    private ThemeManagerTheme _themeManager = new ThemeManagerTheme();
   

    void UpdateTheme(ThemeManagerTheme value)
    {
        _themeManager = value;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        _themeManager.Theme = new MudBlazorAdminDashboard();
        _themeManager.DrawerClipMode = DrawerClipMode.Always;
        _themeManager.FontFamily = "Montserrat";
        _themeManager.DefaultBorderRadius = 3;
        _themeManager.AppBarElevation = 0;
        _themeManager.DrawerElevation = 25;

        StateHasChanged();
    }

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
{
        new BreadcrumbItem("Dashboard", href: "#"),
    };

    private string[] states =
  {
        "Alabama", "Alaska", "American Samoa", "Arizona",
        "Arkansas", "California", "Colorado", "Connecticut",
        "Delaware", "District of Columbia", "Federated States of Micronesia",
        "Florida", "Georgia", "Guam", "Hawaii", "Idaho",
        "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky",
        "Louisiana", "Maine", "Marshall Islands", "Maryland",
        "Massachusetts", "Michigan", "Minnesota", "Mississippi",
        "Missouri", "Montana", "Nebraska", "Nevada",
        "New Hampshire", "New Jersey", "New Mexico", "New York",
        "North Carolina", "North Dakota", "Northern Mariana Islands", "Ohio",
        "Oklahoma", "Oregon", "Palau", "Pennsylvania", "Puerto Rico",
        "Rhode Island", "South Carolina", "South Dakota", "Tennessee",
        "Texas", "Utah", "Vermont", "Virgin Island", "Virginia",
        "Washington", "West Virginia", "Wisconsin", "Wyoming",
    };

    private async Task<IEnumerable<string>> AutoComplete(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
            return new string[0];
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}
