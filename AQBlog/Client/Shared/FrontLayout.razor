@inherits LayoutComponentBase
@using AQBlog.Shared
@inject IFrontService frontService
@inject NavigationManager navigationManager
@*@inject AppState AppState*@

<MudThemeProvider Theme="_themeManager.Theme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="_themeManager.AppBarElevation" Dense="true">
        <div>
            <MudLink Href="/">
                <img src="main-header-logo.svg" style="height:40px" alt="Logo" />
                @*<MudAvatar Style="@($"color:#ffffff; font-weight: 800;")" Color="Color.Primary" Square="true">&lt;/&gt;</MudAvatar>
                    <MudAvatar Style="@($"color:#ffffff; font-weight: 800;")" Color="Color.Primary" Square="true"> AQ</MudAvatar>*@
            </MudLink>

        </div>

        <MudAppBarSpacer />
        <MudAutocomplete T="string" SearchFunc="@AutoComplete"
                         ResetValueOnEmptyText="@resetValueOnEmptyText" Variant="Variant.Outlined"
                         AdornmentIcon="@Icons.Material.Filled.Search" Margin="Margin.Dense"
                         Style="@($"background:{Colors.Blue.Lighten1};")" ValueChanged="@OnValueChanged" />

        <MudAppBarSpacer />
    </MudAppBar>

    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
            <MudGrid>
                <MudItem xs="12" md="9" Class="pr-4">
                    <MudPaper Class="d-block align-start py-2 px-1">
                        @Body
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" md="3">
                    <MudPaper Class="d-block align-start py-2 px-1">
                        <AQBlog.Client.Pages.Category></AQBlog.Client.Pages.Category>
                    </MudPaper>
                </MudItem>
            </MudGrid>

        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private bool resetValueOnEmptyText;
    private string value2;

    private ThemeManagerTheme _themeManager = new ThemeManagerTheme();


    void UpdateTheme(ThemeManagerTheme value)
    {
        _themeManager = value;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        _themeManager.Theme = new MudBlazorAdminDashboard();
        _themeManager.DrawerClipMode = DrawerClipMode.Always;
        _themeManager.FontFamily = "Montserrat";
        _themeManager.DefaultBorderRadius = 3;
        _themeManager.AppBarElevation = 0;
        _themeManager.DrawerElevation = 25;

        StateHasChanged();
    }

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
{
        new BreadcrumbItem("Dashboard", href: "#"),
    };

    private void OnValueChanged(string val)
    {
        //this.AppState.SetVal(val);
        navigationManager.NavigateTo("/" + val.Replace(' ','-'));
    }



    private async Task<IEnumerable<string>> AutoComplete(string value)
    {
        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
            return new string[0];

        await Task.Delay(2000);
        var titles = await frontService.SearchBlog(value);

        return titles;
    }
}
